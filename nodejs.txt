
const express = require('express');
const exec = require('child_process').exec;
const bodyParser = require('body-parser');
const fs = require('fs');
const app = express();
const port = 3000;

// Path to store SSID to IP mapping
const wifiIpsFile = './wifi_ips.json';

// Serve static files from 'public' folder
app.use(express.static('public'));
app.use(bodyParser.json());


// Load SSID to IP mappings
function loadWifiIps() {
  if (!fs.existsSync(wifiIpsFile)) {
    return {}; // If file doesn't exist, return an empty object
  }
  const data = fs.readFileSync(wifiIpsFile);
  return JSON.parse(data);
}

// Save SSID to IP mappings
function saveWifiIps(wifiIps) {
  fs.writeFileSync(wifiIpsFile, JSON.stringify(wifiIps, null, 2));
}

// Get the current IP of the Raspberry Pi's wlan0 interface
function getCurrentIp() {
  return new Promise((resolve, reject) => {
    exec("ip -4 addr show wlan0 | grep -oP '(?<=inet\\s)\\d+(\\.\\d+){3}'", (err, stdout) => {
      if (err || !stdout.trim()) {
        return resolve('No IP assigned'); // Handle cases where wlan0 has no IP
      }
      resolve(stdout.trim()); // Remove any extra whitespace
    });
  });
}

// Check if a Wi-Fi profile exists
function doesProfileExist(ssid) {
  return new Promise((resolve, reject) => {
    exec(`nmcli connection show "${ssid}"`, (error, stdout) => {
      if (error) {
        // If error occurs, it means profile doesn't exist
        resolve(false);
      } else {
        resolve(true); // Profile exists
      }
    });
  });
}

// Endpoint to get connected Wi-Fi and wlan0 IP
app.get('/status', (req, res) => {
  exec("nmcli -t -f ACTIVE,SSID dev wifi | grep '^yes' | cut -d: -f2", (error, ssid) => {
    if (error) {
      return res.status(500).json({ error: 'Error getting SSID.' });
    }
    ssid = ssid.trim();

    getCurrentIp()
      .then(ipAddress => {
        res.json({ ssid: ssid || 'Not connected', ip: ipAddress });
      })
      .catch(() => {
        res.status(500).json({ error: 'Error getting IP address.' });
      });
  });
});

// Helper function to run shell commands
const executeCommand = (command) => {
  return new Promise((resolve, reject) => {
    exec(command, (error, stdout) => {
      if (error) {
        return reject(error);
      }
      resolve(stdout);
    });
  });
};

app.get('/scan', async (req, res) => {
  try {
    // Add a delay of 10 seconds to handle the cooldown period
    const cooldown = 10000; // 10 seconds
    setTimeout(async () => {
      try {
        // Trigger a rescan
        await executeCommand('nmcli dev wifi rescan');

        // List available Wi-Fi networks after the rescan
        const stdout = await executeCommand('nmcli -t -f SSID,SIGNAL dev wifi');
        const networks = stdout
          .split('\n')
          .filter(line => line.trim() !== '')
          .map(line => {
            const [ssid, signal] = line.split(':');
            return { ssid: ssid || 'Hidden Network', signal: signal || 'N/A' };
          });

        res.json(networks); // Return the list of networks
      } catch (error) {
        res.status(500).json({ error: 'Error rescanning or listing Wi-Fi networks.' });
      }
    }, cooldown);
  } catch (error) {
    res.status(500).json({ error: 'Unexpected error occurred.' });
  }
});


// Endpoint to connect to a Wi-Fi network and assign static IP if possible
app.post('/connect', async (req, res) => {
  const { ssid, password } = req.body;
  if (!ssid || !password) {
    return res.status(400).json({ error: 'SSID and password are required.' });
  }

  const wifiIps = loadWifiIps(); // Load current SSID to IP mappings
  const staticIp = wifiIps[ssid];

  // Check if the profile already exists
  const profileExists = await doesProfileExist(ssid);

  if (profileExists) {
    // If the profile exists, activate it
    exec(`nmcli connection up "${ssid}"`, (error, stdout, stderr) => {
      if (error || stderr) {
        return res.status(500).json({ error: `Failed to activate profile for ${ssid}.` });
      }

      // If there's a static IP for this SSID, try to assign it
      if (staticIp) {
        // Here you would normally configure static IP in network settings
        console.log(`Assigning static IP: ${staticIp} to ${ssid}`);

        // Set static IP (this would require modifying network settings like dhcpcd.conf)
        // For simplicity, we are assuming this step is handled by your system
      } else {
        // Get the current dynamic IP assigned by DHCP
        getCurrentIp().then(ip => {
          console.log(`Assigned dynamic IP: ${ip}`);

          // Save the SSID to IP mapping for future use
          wifiIps[ssid] = ip;
          saveWifiIps(wifiIps);
          console.log(`Static IP for ${ssid} saved: ${ip}`);
        });
      }

      res.json({ message: `Reconnected to ${ssid}` });
    });
  } else {
    // If the profile doesn't exist, create a new connection
    exec(`nmcli dev wifi connect "${ssid}" password "${password}"`, async (error, stdout, stderr) => {
      if (error || stderr) {
        return res.status(500).json({ error: `Failed to connect to ${ssid}.` });
      }

      // If there's a static IP for this SSID, try to assign it
      if (staticIp) {
        console.log(`Assigning static IP: ${staticIp} to ${ssid}`);
      } else {
        const ip = await getCurrentIp();
        console.log(`Assigned dynamic IP: ${ip}`);

        // Save the SSID to IP mapping for future use
        wifiIps[ssid] = ip;
        saveWifiIps(wifiIps);
        console.log(`Static IP for ${ssid} saved: ${ip}`);
      }

      res.json({ message: `Connected to ${ssid}` });
    });
  }
});

// Serve the web UI
app.listen(port, () => {
  console.log(`Server running at http://localhost:${port}`);
});


___________________________________________________________________________




<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Wi-Fi Manager</title>
  <style>
    /* General Styling */
    body {
      font-family: Arial, sans-serif;
      text-align: center;
      padding: 20px;
      max-width: 600px;
      margin: auto;
    }
    .container {
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 20px;
    }
    .status, .networks {
      width: 100%;
    }
    .btn {
      padding: 10px 20px;
      background-color: #4CAF50;
      color: white;
      border: none;
      cursor: pointer;
      margin: 5px;
      border-radius: 5px;
    }
    .btn:hover {
      background-color: #45a049;
    }

    /* Loading Indicator Styling */
    .loading-indicator {
      display: none;
      margin-top: 5px;
      font-size: 0.9em;
      color: #888;
    }

    /* Wi-Fi Table Styling */
    .wifi-table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 10px;
    }
    .wifi-table th, .wifi-table td {
      padding: 12px;
      border: 1px solid #ddd;
      text-align: left;
    }
    .wifi-table th {
      background-color: #f2f2f2;
    }
    .wifi-table tr:hover {
      background-color: #f9f9f9;
      cursor: pointer;
    }

    /* Popup Styling */
    .popup {
      display: none;
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background-color: white;
      padding: 20px;
      border: 1px solid #ddd;
      box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
      width: 90%;
      max-width: 400px;
      text-align: left;
    }
    .popup input {
      margin: 10px 0;
      padding: 8px;
      width: calc(100% - 16px);
      box-sizing: border-box;
    }
    .popup h2 {
      margin: 0;
    }
  </style>
</head>
<body>

  <h1>Wi-Fi Manager</h1>

  <div class="container">
    <!-- Status Section with Loading Indicator -->
    <div class="status">
      <p><strong>Connected Wi-Fi:</strong> <span id="wifi-ssid">Loading...</span></p>
      <p><strong>IP Address:</strong> <span id="wifi-ip">Loading...</span></p>
      <button class="btn" onclick="refreshStatus()">Refresh</button>
      <p class="loading-indicator" id="status-loading">Refreshing...</p>
    </div>

    <!-- Networks Section with Loading Indicator -->
    <div class="networks">
      <button class="btn" onclick="scanNetworks()">Scan Wi-Fi</button>
      <p class="loading-indicator" id="scan-loading">Scanning for networks...</p>
      <table class="wifi-table" id="wifi-list">
        <thead>
          <tr>
            <th>SSID</th>
            <th>Signal Strength</th>
          </tr>
        </thead>
        <tbody></tbody>
      </table>
    </div>
  </div>

  <!-- Popup for Wi-Fi Password -->
  <div class="popup" id="popup">
    <h2>Connect to Wi-Fi</h2>
    <p id="popup-ssid"></p>
    <input type="password" id="wifi-password" placeholder="Enter Wi-Fi password">
    <button class="btn" onclick="connectToWifi()">Connect</button>
    <button class="btn" onclick="closePopup()">Cancel</button>
  </div>

  <script>
    let selectedSsid = '';

    // Show loading indicator during status refresh
    function refreshStatus() {
      const statusLoading = document.getElementById('status-loading');
      statusLoading.style.display = 'block';

      fetch('/status')
        .then(response => response.json())
        .then(data => {
          document.getElementById('wifi-ssid').textContent = data.ssid || 'Not connected';
          document.getElementById('wifi-ip').textContent = data.ip || 'Not available';
        })
        .catch(error => {
          document.getElementById('wifi-ssid').textContent = 'Error fetching Wi-Fi';
          document.getElementById('wifi-ip').textContent = 'Error fetching IP';
        })
        .finally(() => {
          statusLoading.style.display = 'none';
        });
    }

    // Scan for Wi-Fi networks with loading indicator
    function scanNetworks() {
      const scanLoading = document.getElementById('scan-loading');
      scanLoading.style.display = 'block';

      fetch('/scan')
        .then(response => response.json())
        .then(networks => {
          const wifiList = document.getElementById('wifi-list').getElementsByTagName('tbody')[0];
          wifiList.innerHTML = '';
          networks.forEach(network => {
            const row = document.createElement('tr');
            row.innerHTML = `<td>${network.ssid || 'Hidden Network'}</td><td>${network.signal || 'N/A'}</td>`;
            row.onclick = () => showPopup(network.ssid);
            wifiList.appendChild(row);
          });
        })
        .catch(error => {
          alert('Error scanning Wi-Fi networks.');
        })
        .finally(() => {
          scanLoading.style.display = 'none';
        });
    }

    // Show the popup to enter Wi-Fi password
    function showPopup(ssid) {
      selectedSsid = ssid;
      document.getElementById('popup-ssid').textContent = `SSID: ${ssid}`;
      document.getElementById('popup').style.display = 'block';
    }

    // Close the password popup
    function closePopup() {
      document.getElementById('popup').style.display = 'none';
    }

    // Connect to Wi-Fi with the entered password
    function connectToWifi() {
      const password = document.getElementById('wifi-password').value;
      fetch('/connect', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ ssid: selectedSsid, password })
      })
        .then(response => response.json())
        .then(data => {
          alert(data.message || data.error);
          closePopup();
          refreshStatus();
        })
        .catch(error => {
          alert('Error connecting to Wi-Fi.');
        });
    }

    // Fetch Wi-Fi status on page load
    window.onload = refreshStatus;
  </script>

</body>
</html>

___________________________________________________________________________

wifiapp.service

[Unit]
Description=wifi web App
After=network.target

[Service]
ExecStart=/usr/bin/node /home/share/wifi-web-app/server.js
WorkingDirectory=/home/share/wifi-web-app
StandardOutput=inherit
StandardError=inherit
Restart=always
User=root
Group=root

[Install]
WantedBy=multi-user.target

